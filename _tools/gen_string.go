package main

import (
	"flag"
	"fmt"
	"log"
	"os"
)

const fileFormat = `// Code generated by _tools/gen_string.go; DO NOT EDIT.

package gojq

import "regexp"

const stringPatternStr = %s

const queryPatternStr = %s

var queryInStringPattern = regexp.MustCompile(%s)
`

func main() {
	var output string
	flag.StringVar(&output, "o", "", "output file")
	flag.Parse()
	out := os.Stdout
	if output != "" {
		f, err := os.Create(output)
		if err != nil {
			log.Fatalln(err)
		}
		defer f.Close()
		out = f
	}
	fmt.Fprintf(out, fileFormat,
		"`"+stringPatternWrap("` + queryPatternStr + `")+"`",
		"`"+queryPattern(5)+"`",
		"`"+`^\\\(`+"` + queryPatternStr + `"+`\)`+"`",
	)
}

// Since the current parser does not support nested lexers, define the String token by
// a regular expression. This implementation is of course very ugly and
// incomplete, but should work in most situations.
func stringPattern(n int) string {
	if n <= 0 {
		return `"[^"\\]*"`
	}
	return stringPatternWrap(queryPattern(n))
}

func stringPatternWrap(pattern string) string {
	return `"(?:[^"\\]|\\(?:[[:alnum:]\\'"]|\(` + pattern + `\)))*"`
}

func queryPattern(n int) string {
	if n <= 0 {
		return `[^"()]+`
	}
	q, s := queryPattern(n-1), stringPattern(n-1)
	return `(?:(?:\s|#[^\n]*)*(?:[^"()#[:space:]]+|\(` + q + `\)|` + s + `))+(?:\s|#[^\n]*)*`
}
